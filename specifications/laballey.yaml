# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: LabAlley API
  description: An API to navigate the alley of the labs. 
  version: "1.0.0"
# the domain of the service
host: api.laballey.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /labs:
    get:
      summary: Get labs at a location
      description: Self explanatory
      parameters:
        - name: address
          in: query
          description:  The location where the application will search
          required: true
          type: string
      tags:
        - labs
      responses:
        200:
          description: Successful search
          schema:
            type: array
            items:
              $ref: '#/definitions/lab'
    post:
      summary: Create new lab
      description: Used by the administrator to create a new lab.
      parameters:
        - name: name
          in: query
          description: Unique name of each lab.
          required: true
          type: string
        - name: address
          in: query
          required: true
          type: string
        - name: contactInfo
          in: query
          required: false
          type: string
      tags: 
        - labs
      responses:
        200:
          $ref: "#/responses/Standard200Response"
        409:
          $ref: "#/responses/Standard409Response"
  /labs/{name}:
    get:
      summary: get lab description
      description: Get the details of a lab.
      parameters:
        - name: name
          in: path
          description:  Unique name of each lab.
          required: true
          type: string
      tags:
        - labs
      responses:
        200:
          description: Returns lab data
          schema:
            $ref: '#/definitions/lab'
        404:
          description: The lab does not exists.
    put:
      summary: update lab information
      description: each lab can update its own details
      parameters:
        - name: contactInfo
          in: query
          description: The contact information of each lab.
          required: false
          type: string
        - name: address
          in: query
          description: The physical address of each lab.
          required: false
          type: string
        - name: name
          in: path
          description:  Unique name of each lab.
          required: true
          type: string
      responses:
        200:
          description: Returns lab data
          schema:
            $ref: '#/definitions/lab'
        404:
          $ref: "#/responses/Standard404Response"
    delete:
      summary: delete lab object
      description: The administrator can delete labs
      parameters:
        - name: name
          in: path
          description:  Unique name of each lab.
          required: true
          type: string
      responses:
        200:
          $ref: "#/responses/Standard200Response"
        404:
          $ref: "#/responses/Standard404Response"
          
  /labs/{name}/test:
    post:
      summary: Create new test
      description: Used by labs to create new tests.
      parameters:
        - name: name
          in: path
          description: Unique name of each lab.
          required: true
          type: string
        - name: testname
          in: query
          description: The name of the test
          required: true
          type: string
        - name: price
          in: query
          required: true
          type: number
          format: float
      tags: 
        - labs
        - test
      responses:
        200:
          description: See the created test
          schema:
            $ref: '#/definitions/test'
    get:
      summary: Retrieve test list
      description: Used by labs to review the tests they provide.
      parameters:
        - name: name
          in: path
          description: Unique name of each lab.
          required: true
          type: string
      tags: 
        - labs
        - test
      responses:
        200:
          description: The labs sees the test list.
          schema:
            $ref: '#/definitions/tests'
  /labs/{name}/test/{testname}:
    put:
      summary: Update test information
      description: Used by labs to update the tests they provide.
      parameters:
        - name: name
          in: path
          description: Unique name of each lab.
          required: true
          type: string
        - name: testname
          in: path
          description: The name of each test.
          required: true
          type: string
      tags: 
        - labs
        - test
      responses:
        200:
          description: The labs sees the updated test.
          schema:
            $ref: '#/definitions/test'
        404:
          $ref: '#/responses/Standard404Response'
    delete:
        summary: Delete test from list
        description: Used by labs to delete the tests they provide.
        parameters:
          - name: name
            in: path
            description: Unique name of each lab.
            required: true
            type: string
          - name: testname
            in: path
            description: The name of each test.
            required: true
            type: string
        tags: 
          - labs
          - test
        responses:
          200:
            $ref: '#/responses/Standard200Response'
          404:
            $ref: '#/responses/Standard404Response'

  /patients:
    get:
      description: Gets all the patients
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Patients succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/patient'
    post:
      description: A new patient registers
      operationId: addPatient
      parameters:
        - name: patient
          in: body
          required: true
          description: Patient to add to the system
          schema:
            $ref: '#/definitions/newPatient'
      responses:
        201:
          description: Patient created
  /patients/{pid}:
    parameters:
      - name: pid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a patient with *pid*
      responses:
        200:
          description: Patient succesfully retrieved
          schema:
            $ref: '#/definitions/patient'
        404:
          $ref: "#/responses/Standard404Response"
    delete:
      description: Delete a patient with *pid*
      responses:
        200:
          description: Patient deleted 
          schema:
            $ref: '#/definitions/patient'
        404:
          description: Patient not found
    put:
      description: Update a patient with *pid*
      operationId: updatePatient
      parameters:
        - name: patient
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newPatient'
      responses:
        200:
          description: Patient updated
          schema:
            $ref: '#/definitions/patient'
        404:
          description: Patient not found
          
  /test/{name}:
    get:
      summary: Search for tests based on name
      description: The users can search for available tests
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - test
      responses:
        200:
          description: Return the list of tests that match the criteria
          schema:
            $ref: "#/definitions/tests"
        404:
          $ref: "#/responses/Standard404Response"
          
  /appointments:
    get:
      description: Gets all appointments
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Appointments succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/appointment'
    post:
      description: A new appointment is created
      operationId: addAppointment
      parameters:
        - name: appointment
          in: body
          required: true
          description: Appointment to be added to the system
          schema:
            $ref: '#/definitions/newAppointment'
      responses:
        201:
          description: Appointment created
  /appointments/{aid}:
    parameters:
      - name: aid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get an appointment with *aid*
      responses:
        200:
          description: Appointment succesfully retrieved
          schema:
            $ref: '#/definitions/appointment'
        404:
          $ref: "#/responses/Standard404Response"
    delete:
      description: Cancel an appointment with *aid*
      responses:
        200:
          description: Appointment deleted 
          schema:
            $ref: '#/definitions/appointment'
        404:
          $ref: "#/responses/Standard404Response"
          
  /carts/{cid}::
    get:
      description: Get a cart with *cid*
      parameters:
        - name: cid
          in: path
          required: true
          description: cartID
          type: integer
          format: int64
      responses:
        200:
          description: Cart succesfully retrieved
          schema:
            $ref: '#/definitions/cart'
        404:
          $ref: "#/responses/Standard404Response"

    put:
      description: Update a cart with *cid*
      parameters:
        - name: cart
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/cart'
        - name: cid
          in: path
          required: true
          description: cartID
          type: integer
          format: int64
      responses:
        200:
          description: Cart updated
          schema:
            $ref: '#/definitions/cart'
        404:
          $ref: "#/responses/Standard404Response"
    
definitions:
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  lab:
    type: object
    properties:
      name:
        type: string
        description: Unique name of each lab.
      address:
        type: string
        description: The physical address of each lab.
      contactInfo:
        type: string
        description: The contact information provided by each lab.
  user:
    type: object
    properties:
      username:
        type: string
        pattern: '[a-z0-9]{8,64}'
        minLength: 8
        maxLength: 64
      password:
        type: string
        pattern: '[a-z0-9]{8,64}'
        minLength: 8
        maxLength: 64
  patient:
    type: object
    properties:
      username:
        type: string
        pattern: '[a-z0-9]{8,64}'
        minLength: 8
        maxLength: 64
      password:
        type: string
        pattern: '[a-z0-9]{8,64}'
        minLength: 8
        maxLength: 64
      patientName:
        type: string
      email:
        type: string
      phoneNumber:
        type: integer
        format: int32
      address:
        type: string
      creditCardInfo:
        type: string
      id:
        type: integer
        format: int64
  test:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      price:
        type: number
        format: float
  tests:
    type: array
    items:
      $ref: "#/definitions/test"
  newPatient:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phoneNumber:   
        type: integer
        format: int64
      address:
        type: string
      creditCardInfo:
        type: string
  cart:
    type: object
    required:
      - id
      - quantity
      - dateAdded
    properties:
      id:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int64
      dateAdded:
       type: string
  appointment:
    type: object
    properties:
      ID:
        type: integer
        format: int64
      patientID:
        type: integer
        format: int64
      testID:
        type: integer
        format: int64
        
  newAppointment:
    type: object
    properties:
      dateCreated:
        type: string
      samplingDate:
        type: string
      patient:
        $ref: '#/definitions/patient'
      test:
        $ref: '#/definitions/test'
      
      
        
responses:
  Standard200Response:
    description: Operation completed successfuly
    schema:
      $ref: "#/definitions/Error"
  Standard404Response:
    description: The resource does not exist
    schema:
      $ref: "#/definitions/Error"
  Standard409Response:
    description: Resource already exists
    schema:
      $ref: "#/definitions/Error"
